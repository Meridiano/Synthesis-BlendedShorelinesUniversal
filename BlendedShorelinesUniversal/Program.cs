using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Synthesis.Bethesda.Commands;

namespace BlendedShorelinesUniversal
{
    public class Program
    {
        public class PatcherSettings
        {
            // bool
            public bool ChangeReflections = true;
            public bool ChangeRefraction = true;
            public bool ChangeNormals = true;
            public bool ChangeSpecularLighting = true;
            // float
            public float NewReflectionsValue = 1.0F;
            public float NewRefractionValue = 1.0F;
            public float NewNormalsValue = 0.2F;
            public float NewSpecularLightingValue = 1.0F;
        }

        public static Lazy<PatcherSettings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "Settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "Blended Shorelines Universal.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            bool bREFL = Settings.Value.ChangeReflections;
            bool bREFR = Settings.Value.ChangeRefraction;
            bool bNORM = Settings.Value.ChangeNormals;
            bool bSPEC = Settings.Value.ChangeSpecularLighting;
            if (bREFL || bREFR || bNORM || bSPEC)
            {
                float fREFL = Settings.Value.NewReflectionsValue;
                float fREFR = Settings.Value.NewRefractionValue;
                float fNORM = Settings.Value.NewNormalsValue;
                float fSPEC = Settings.Value.NewSpecularLightingValue;
                foreach (var waterGetter in state.LoadOrder.PriorityOrder.Water().WinningOverrides())
                {
                    bool skipREFL = waterGetter.DepthReflections.Equals(fREFL);
                    bool skipREFR = waterGetter.DepthRefraction.Equals(fREFR);
                    bool skipNORM = waterGetter.DepthNormals.Equals(fNORM);
                    bool skipSPEC = waterGetter.DepthSpecularLighting.Equals(fSPEC);
                    if (skipREFL && skipREFR && skipNORM && skipSPEC)
                    {
                        Console.WriteLine(waterGetter.EditorID + " > Skip the correct record");
                    }
                    else
                    {
                        Console.WriteLine(waterGetter.EditorID + " > Override and patch record");
                        var water = state.PatchMod.Waters.GetOrAddAsOverride(waterGetter);
                        if (bREFL) water.DepthReflections = fREFL;
                        if (bREFR) water.DepthRefraction = fREFR;
                        if (bNORM) water.DepthNormals = fNORM;
                        if (bSPEC) water.DepthSpecularLighting = fSPEC;
                    }
                }
            }
            else
            {
                Console.WriteLine("All options disabled");
            }
        }
    }
}
